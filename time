## 1. 시간 복잡도
> 내가 짠 코드가 어느정도의 시간이 걸릴까? 생각보다 오래걸릴 수도 있을 것 같은데...

일단 `Big-O` 표기법이라는게 있습니다. 얘도 함수라서 아래처럼 표현합니다.

<center>O(1)<br>
O(N)<br>
O(N^2)<br>
O(V+E)<br>
O(NM)<br>
O(NlogN)<br>
O(N!)<br></center>
<br>

`Big-O` 표기법의 정의는 다음과 같습니다.
> 모든 `N0 <= N`인 N에 대하여 `0 <= f(N) <= k*g(N)`인 양의 상수 `k`와 `N0`가 존재하면 `f(N) = O(g(N))`이다.

천천히 해석한 번 해봅시다.

어떤 함수 `f(n)`, `g(n)`이 있습니다. 해당 함수는 `n = n0`에서 만납니다. <br>
또한, `n0`에서 만난 이후로 모든 `n`값에 대하여 `f(n) <= k*g(n)`을 만족합니다. `g(n)`에다가 어떤 양수 `k`를 곱하면 `n0 <= n`인 모든 `n`값에 대해서 `f(n) <= k*g(n)`을 만족시킬 수 있다는 이야기입니다!

예시를 한 번 들어보죠!

> f(n) = 3n^2 + 4n + 4, g(n) = n^2

아래 그래프를 한 번 봅시다.

![alt text](image-1.png)

초록색이 `f(n)`, 파란색이 `g(n)`입니다. 여기서 `k = 10`을 넣는다면??

![alt text](image-2.png)

1에 가까운 `n0`가 하나 있네요.(교점) 이 교점 이후로는 `f(n) < 10*g(n)` 이네요!<br>
적절한 `n0`도 있고, 적절한 `k`도 있으니, `f(n) = O(g(n)) = O(n^2)`이라고 할 수 있습니다!

## 2. Big-O 표기법의 특징
> 상수 버려, 계수 버려, 최고차항 빼고 버려!!

저 세가지가 Big-O 표기법의 가장 큰 특징들입니다. <br>
아까 전에 봤던 예제를 그대로 들고 와봅시다.
`3n^2 + 4n + 4 = O(n^2)`

일단 `n^2`을 제외한 모든것을 지웁시다. 또한, `n^2`의 계수인 `3`도 지워봅시다. 그럼 `n^2`만 남습니다!

이를 이용해서 아래와 같은 예제들을 만들 수도 있습니다.

<center>1, 59, 2147483647 = O(1) <br>
n, 3n, 59n, 78n + 32767 = O(n) <br>
n^2 + 3n, 7n^2 = O(n^2) <br>
nlogn = O(nlogn) <br> </center>

